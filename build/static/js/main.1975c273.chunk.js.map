{"version":3,"sources":["component/usercomponent.jsx","component/navbar/navbarcomponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginTop","UserComponent","classes","useState","rowData","setrowData","useEffect","axios","method","url","then","response","res","data","contacts","contactData","forEach","element","temp","company_name","contact_type","currency_code","customer_name","email","outstanding_payable_amount","outstanding_receivable_amount","status","gst_treatment","phone","val","push","console","log","Container","className","Grid","container","spacing","item","xs","lg","title","columns","field","options","selection","sorting","exportButton","flexGrow","menuButton","marginRight","Navbar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","App","document","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kUAKMA,EAAYC,aAAW,SAACC,GAAD,MAAU,CACnCC,KAAK,CACDC,UAAU,UAgFHC,EA5EO,WAElB,IAAMC,EAAUN,IAFM,EAGQO,mBAAS,IAHjB,mBAGfC,EAHe,KAGNC,EAHM,KAqCtBC,qBAAU,WAEN,OAhCAC,IAAM,CACFC,OAAO,MACPC,IAAI,eAEPC,MAAK,SAACC,GAEH,IAAMC,EAAMD,EAASE,KAAKC,SACtBC,EAAc,GAClBH,EAAII,SAAQ,SAAAC,GACX,IAAIC,EAAO,CACXC,aAAa,GACbC,aAAa,GACbC,cAAc,GACdC,cAAc,GACdC,MAAM,GACNC,2BAA2B,GAC3BC,8BAA8B,GAC9BC,OAAO,GACPC,cAAc,GACfC,MAAM,IAEN,IAAI,IAAIC,KAAOX,EACXA,EAAKW,GAAOZ,EAAQY,GAExBd,EAAYe,KAAKZ,MAEjBb,EAAWU,MAMR,WACHgB,QAAQC,IAAI,WAEjB,IAaH,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAWhC,EAAQH,MAC1B,kBAACoC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACvB,kBAAC,IAAD,CACIC,MAAM,gBACNC,QAjBD,CACX,CAACD,MAAM,OAAQE,MAAM,iBACrB,CAACF,MAAM,eAAgBE,MAAM,gBAC7B,CAACF,MAAM,QAASE,MAAM,SACtB,CAACF,MAAM,aAAcE,MAAM,SAC3B,CAACF,MAAM,gBAAiBE,MAAM,iBAC9B,CAACF,MAAM,UAAWE,MAAM,8BACxB,CAACF,MAAM,aAAcE,MAAM,iCAC3B,CAACF,MAAM,SAAUE,MAAM,WAUX9B,KAAMT,EACNwC,QAAS,CACLC,WAAW,EACXC,SAAQ,EACRC,cAAa,S,qDCzE/BnD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJiD,SAAU,GAEZC,WAAY,CACVC,YAAapD,EAAMuC,QAAQ,IAE7BI,MAAO,CACLO,SAAU,OAoBDG,EAhBA,WACX,IAAMjD,EAAUN,IAChB,OACJ,kBAACwD,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQtB,UAAWhC,EAAQ+C,WAAYQ,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK1B,UAAWhC,EAAQuC,OAA5C,oBCNWoB,MAbf,WAKI,OAJAvD,qBAAU,WACNwD,SAASrB,MAAQ,eAIjB,yBAAKP,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDQ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.1975c273.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Container, Grid, makeStyles} from '@material-ui/core'\r\nimport MaterialTable from \"material-table\";\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        marginTop:'5%'\r\n    }\r\n}))\r\n\r\nconst UserComponent = ()=>{\r\n\r\n    const classes = useStyles();\r\n    const [rowData, setrowData] = useState([]);\r\n\r\n    const getData = ()=>{\r\n\r\n        axios({\r\n            method:'GET',\r\n            url:'/api/users'\r\n        })\r\n        .then((response)=>\r\n        {\r\n            const res = response.data.contacts;\r\n            let contactData = [];\r\n            res.forEach(element => {\r\n             let temp = {\r\n             company_name:'', \r\n             contact_type:'',\r\n             currency_code:'',\r\n             customer_name:'',\r\n             email:'',\r\n             outstanding_payable_amount:'',\r\n             outstanding_receivable_amount:'', \r\n             status:'', \r\n             gst_treatment:'', \r\n            phone:''}\r\n\r\n            for(let val in temp){\r\n                temp[val] = element[val]\r\n            }\r\n            contactData.push(temp)\r\n            });\r\n            setrowData(contactData)\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        return () => {\r\n            console.log(\"done\")\r\n        };\r\n    }, []);\r\n\r\n   const columns = [\r\n        {title:'Name', field:'customer_name'},\r\n        {title:'Company Name', field:'company_name'},\r\n        {title:'Email', field:'email'},\r\n        {title:'Work Phone', field:'phone'},\r\n        {title:'Gst Treatment', field:'gst_treatment'},\r\n        {title:'Payable', field:'outstanding_payable_amount'},\r\n        {title:'Receivable', field:'outstanding_receivable_amount'},\r\n        {title:'status', field:'status'},\r\n   ];\r\n\r\n    return(\r\n        <Container className={classes.root}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} lg={12}>\r\n                <MaterialTable  \r\n                    title='Customer List'\r\n                    columns={columns}\r\n                    data={rowData}\r\n                    options={{\r\n                        selection: true,\r\n                        sorting:true, \r\n                        exportButton:true\r\n                      }}\r\n                    />\r\n                </Grid> \r\n            </Grid>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default UserComponent;","import React from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nconst Navbar = () =>{\r\n    const classes = useStyles();\r\n    return(\r\n<AppBar position=\"static\">\r\n  <Toolbar>\r\n    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n      <MenuIcon  />\r\n    </IconButton>\r\n    <Typography variant=\"h6\" className={classes.title}>\r\n      Zoho Customer\r\n    </Typography>\r\n  </Toolbar>\r\n</AppBar>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { useEffect } from 'react';\nimport './App.css';\nimport UserComponent from './component/usercomponent';\nimport Navbar from './component/navbar/navbarcomponent';\n\nfunction App() {\n    useEffect(()=>{\n        document.title = 'customers'\n    })\n\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <UserComponent />   \n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}